AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda EFO Consumer
Transform: AWS::Serverless-2016-10-31
Parameters:
  ParamEnv1:
    Type: String
    Default: default1
  ParamEnv2:
    Type: String
    Default: default2
  ParamKinesisArn:
    Type: String
Resources:
  ConsumerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt ConsumerDLQ.Arn
        - PolicyName: kinesis
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:ListShards
                  - kinesis:ListStreams
                Resource: '*'
        - PolicyName: kinesis-streams
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:SubscribeToShard
                Resource: !Ref ParamKinesisArn
  ConsumerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.handler
      Role: !GetAtt ConsumerExecRole.Arn
      Runtime: python3.8
      CodeUri: ../src
      Environment:
        Variables:
          ENV1: !Ref ParamEnv1
          ENV2: !Ref ParamEnv2
  ConsumerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 600
  ConsumerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      BisectBatchOnFunctionError: true
      DestinationConfig:
        OnFailure:
          Destination: !GetAtt ConsumerDLQ.Arn
      Enabled: true
      EventSourceArn: !Ref ParamKinesisArn
      FunctionName: !Ref ConsumerLambda
      MaximumBatchingWindowInSeconds: 60
      ParallelizationFactor: 2
      StartingPosition: LATEST

Outputs:
  OutConsumerExecRoleArn:
    Value: !GetAtt ConsumerExecRole.Arn
  OutConsumerLambdaArn:
    Value: !GetAtt ConsumerLambda.Arn
  OutConsumerDLQArn:
    Value: !GetAtt ConsumerDLQ.Arn
  OutConsumerEventSourceMapping:
    Value: !Ref ConsumerEventSourceMapping