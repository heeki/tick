AWSTemplateFormatVersion: '2010-09-09'
Description: Tick Lambda consumer
Transform: AWS::Serverless-2016-10-31
Parameters:
  kinesisArn:
    Type: String
Resources:
  FnExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt DLQ.Arn
        - PolicyName: kinesis
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:ListShards
                  - kinesis:ListStreams
                Resource: '*'
        - PolicyName: kinesis-streams
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:SubscribeToShard
                Resource: !Ref kinesisArn
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.handler
      Role: !GetAtt FnExecRole.Arn
      Runtime: python3.8
      CodeUri: ../src
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2'
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Fn}"
      RetentionInDays: 7
  DLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 600
  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      BisectBatchOnFunctionError: true
      DestinationConfig:
        OnFailure:
          Destination: !GetAtt DLQ.Arn
      Enabled: true
      EventSourceArn: !Ref kinesisArn
      FunctionName: !Ref Fn
      MaximumBatchingWindowInSeconds: 60
      ParallelizationFactor: 2
      StartingPosition: LATEST
Outputs:
  outFnArn:
    Value: !GetAtt Fn.Arn
  outDLQArn:
    Value: !GetAtt DLQ.Arn
  outEventSourceMapping:
    Value: !Ref EventSourceMapping